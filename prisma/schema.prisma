// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                  @id @default(autoincrement())
  githubId            Int                  @unique
  githubUsername      String               @unique
  views               Int                  @default(0)
  openToCollaborating Boolean              @default(false)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  Link                Link[]
  Skill               Skill[]
  Hobby               Hobby[]
  Social              Social[]
  spotifyToken        SpotifyToken?
  RecentActivity      RecentActivity[]
  IntegrationChessCom IntegrationChessCom?
  IntegrationLeetCode  IntegrationLeetCode?
  CryptoWallets       CryptoWallets[]
}

model Link {
  id        Int      @id @default(autoincrement())
  title     String
  url       String
  postedBy  User     @relation(fields: [userId], references: [githubId])
  userId    Int
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Skill {
  id        Int      @id @default(autoincrement())
  title     String
  level     String
  postedBy  User     @relation(fields: [userId], references: [githubId])
  userId    Int
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Hobby {
  id        Int      @id @default(autoincrement())
  userId    Int
  hobby     String
  createdAt DateTime @default(now())
  postedBy  User     @relation(fields: [userId], references: [githubId])
}

model PersonalInformation {
  id       Int     @id @default(autoincrement())
  userId   Int     @unique
  email    String?
  fullName String?
}

model Social {
  id        Int      @id @default(autoincrement())
  userId    Int
  social    String
  socialURL String
  createdAt DateTime @default(now())
  postedBy  User     @relation(fields: [userId], references: [githubId])
}

model SpotifyToken {
  id           Int      @id @default(autoincrement())
  usedBy       User     @relation(fields: [userId], references: [githubId])
  userId       Int      @unique
  accessToken  String
  refreshToken String
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model RecentActivity {
  id                  Int      @id @default(autoincrement())
  usedBy              User     @relation(fields: [userId], references: [githubId])
  userId              Int
  activityType        String
  activityDescription String
  createdAt           DateTime @default(now())
}

model IntegrationChessCom {
  id        Int      @id @default(autoincrement())
  usedBy    User     @relation(fields: [userId], references: [githubId])
  userId    Int      @unique
  username  String
  visible   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model IntegrationLeetCode {
  id        Int      @id @default(autoincrement())
  usedBy    User     @relation(fields: [userId], references: [githubId])
  userId    Int      @unique
  username  String
  visible   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CryptoWallets {
  id         Int      @id @default(autoincrement())
  usedBy     User     @relation(fields: [userId], references: [githubId])
  userId     Int      
  cryptoName String
  wallet     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
